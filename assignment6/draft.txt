

library(igraph)
g <- read.graph("http://igraph.sourceforge.net/karate.net", format="pajek")

repeat{
	edges_betweenness <- edge.betweenness(g)
	max_value <- max(edges_betweenness)
	edge_to_delete <- match(c(max_value),edges_betweenness)
	print('The edge will be deleted next is ')
	print(paste(paste(paste(get.edgelist(g)[edge_to_delete,1]," -> "),get.edgelist(g)[edge_to_delete,2]),paste("      betweenness = ",max_value)))
	g <- delete.edges(g, E(g, P=c(get.edgelist(g)[edge_to_delete,1],get.edgelist(g)[edge_to_delete,2])))
	cluster_no <- clusters(g)['no']
	if(cluster_no == 2)
	{
		print("we have done :: ")
		
	}
}


 [1] 68.454304 22.793498 24.784524 22.793498 22.784524 26.135897 33.000000
 [8] 29.333333 45.094048 12.802381 43.833333 43.833333 29.333333 11.500000
[15] 41.860256 18.000000 21.539011 10.206502  8.124267 10.206502  6.874267
[22]  4.164286  4.500000 13.206410  4.280952  4.947619 17.280952 36.907143
[29] 12.780952 22.968132 14.145238 12.453846  8.298352  6.864103  1.888095
[36]  1.666667  2.666667 16.500000  2.666667  1.666667 16.500000 20.601190
[43] 13.827381 13.827381 16.614286 36.904762 18.676923 14.323077 18.676923
[50] 14.323077 18.676923 14.323077 32.242125 18.676923 14.323077 18.676923
[57] 14.323077  3.733333 17.702473 13.386996  5.803846 11.030495 22.566667
[64] 10.400000  2.366667 23.473352 30.457143  2.542857 17.064286 13.780952
[71]  8.333333 15.910256 13.899267 15.290934 10.248077 28.794048 21.944048
[78]  4.614286
> max(edge.betweenness(g))
[1] 68.4543
> delete.edges(g, E(g, P=c(1,32)) )
IGRAPH U--- 34 77 -- 
> max(edge.betweenness(g))
[1] 68.4543
> edge.betweenness(g)
 [1] 68.454304 22.793498 24.784524 22.793498 22.784524 26.135897 33.000000
 [8] 29.333333 45.094048 12.802381 43.833333 43.833333 29.333333 11.500000
[15] 41.860256 18.000000 21.539011 10.206502  8.124267 10.206502  6.874267
[22]  4.164286  4.500000 13.206410  4.280952  4.947619 17.280952 36.907143
[29] 12.780952 22.968132 14.145238 12.453846  8.298352  6.864103  1.888095
[36]  1.666667  2.666667 16.500000  2.666667  1.666667 16.500000 20.601190
[43] 13.827381 13.827381 16.614286 36.904762 18.676923 14.323077 18.676923
[50] 14.323077 18.676923 14.323077 32.242125 18.676923 14.323077 18.676923
[57] 14.323077  3.733333 17.702473 13.386996  5.803846 11.030495 22.566667
[64] 10.400000  2.366667 23.473352 30.457143  2.542857 17.064286 13.780952
[71]  8.333333 15.910256 13.899267 15.290934 10.248077 28.794048 21.944048
[78]  4.614286
> g <- delete.edges(g, E(g, P=c(1,32)) )
> edge.betweenness(g)
 [1] 20.485365 29.830719 20.485365 27.914053 24.331818 33.000000 29.333333
 [8] 61.828788 10.195055 43.833333 43.833333 29.333333  9.000000 62.757376
[15] 15.500000 23.338961 12.514635  9.043656 12.514635  7.793656  4.195055
[22]  4.500000 16.714719  4.374542  4.991209 17.291209 45.509790 21.119114
[29] 37.305994 16.711538 15.674892  9.391642  8.668182  1.898352  1.666667
[36]  2.666667 16.500000  2.666667  1.666667 16.500000 27.021928 19.532368
[43] 19.532368 16.624542 46.140559 18.690909 14.309091 18.690909 14.309091
[50] 18.690909 14.309091 40.541042 18.690909 14.309091 18.690909 14.309091
[57]  3.733333 20.707093 16.138228  7.361239 16.539893 10.666667 23.453546
[64]  3.520213 15.006560 30.452381  2.547619 17.357875 13.791209  7.661239
[71] 15.924242 13.890043 16.210323 11.128638 25.773760 20.238228  4.624542
> max(edge.betweenness(g))
[1] 62.75738
> g <- delete.edges(g, E(g, P=c(1,3)) )
> edge.betweenness(g)
 [1] 17.343874 36.079281 17.343874 39.226076 21.290616 33.000000 29.333333
 [8] 83.011011 14.758516 43.833333 43.833333 29.333333 13.563462 20.063462
[15] 23.831143 15.656126  9.739747 15.656126  7.989747  4.195055  4.500000
[22] 27.176799  8.938004  9.554670 14.666209 30.574061 16.738587 28.063122
[29] 21.275000 23.095674  9.575523 11.709384  1.898352  1.666667  2.666667
[36] 16.500000  2.666667  1.666667 16.500000 33.770490 24.467468 24.467468
[43] 19.249542 53.269093 19.571429 13.428571 19.571429 13.428571 19.571429
[50] 13.428571 47.485695 19.571429 13.428571 19.571429 13.428571  3.733333
[57] 23.021569 15.856606  5.605712 16.817220 13.358974 20.206586  2.965560
[64] 15.283887 30.452381  2.547619 21.598260 16.416209  5.905712 16.804762
[71] 13.009524 16.406414 11.424729 29.703620 21.033529  4.624542
> max(edge.betweenness(g))
[1] 83.01101
> 
> g <- delete.edges(g, E(g, P=c(1,9)) )
> independence.number(g)
[1] 21
> independent.vertex.sets(g, min=independence.number(g))

> independent.vertex.sets(g)

> clique.number(g)
[1] 4
> largest.cliques(g)
[[1]]
[1] 34 33 24 30

[[2]]
[1] 8 2 4 3

[[3]]
[1] 8 2 4 1

[[4]]
[1]  4  2 14  3

[[5]]
[1]  4  2 14  1

> 
> 
> edge.betweenness.community(g)
Graph community structure calculated with the edge betweenness algorithm
Number of communities (best split): 6 
Modularity (best split): 0.4116444 
Membership vector:
 [1] 1 1 2 1 3 3 3 1 4 5 3 1 1 1 4 4 3 1 4 1 4 1 4 4 2 2 6 2 2 4 4 2 4 4
> maximal.cliques(g)
[[1]]
[1] 34 33 32

[[2]]
[1] 34 33 31

[[3]]
[1] 34 33 24 30

[[4]]
[1] 34 33 23

[[5]]
[1] 34 33 21

[[6]]
[1] 34 33 19

[[7]]
[1] 34 33 16

[[8]]
[1] 34 33 15

[[9]]
[1] 34 33  9

[[10]]
[1] 34 29 32

[[11]]
[1] 34 28 24

[[12]]
[1] 34 27 30

[[13]]
[1] 34 20

[[14]]
[1] 34 14

[[15]]
[1] 34 10

[[16]]
[1] 26 25 32

[[17]]
[1] 26 24

[[18]]
[1] 25 28

[[19]]
[1] 22  1  2

[[20]]
[1] 18  1  2

[[21]]
[1] 17  6  7

[[22]]
[1] 13  1  4

[[23]]
[1] 12  1

[[24]]
[1] 11  1  6

[[25]]
[1] 11  1  5

[[26]]
[1] 8 2 4 3

[[27]]
[1] 8 2 4 1

[[28]]
[1] 7 1 6

[[29]]
[1] 7 1 5

[[30]]
[1]  4  2 14  3

[[31]]
[1]  4  2 14  1

[[32]]
[1]  3 33  9

[[33]]
[1]  3 29

[[34]]
[1]  3 28

[[35]]
[1]  3 10

[[36]]
[1]  2 31

[[37]]
[1]  2  1 20

> clique.number(graph)
Error in clique.number(graph) : Not a graph object
> clique.number(g)
[1] 4
> cs <- leading.eigenvector.community(g, steps=1)
> V(g)$color <- ifelse(cs$membership==1, "lightblue", "green")
> 
> scale <- function(v, a, b) {
+   v <- v-min(v) ; v <- v/max(v) ; v <- v * (b-a) ; v+a
+ }
> 
> V(g)$size <- scale(abs(cs$eigenvectors[[1]]), 10, 20)
> E(g)$color <- "grey"
> E(g)[ V(g)[ color=="lightblue" ] %--% V(g)[ color=="green" ] ]$color <- "red"
> 
> tkplot(g, layout=layout.kamada.kawai, vertex.label.font=2)
[1] 3
> edge.betweenness(g)
 [1] 13.749580 62.408321 13.749580 69.449988 17.496970 33.000000 29.333333
 [8] 17.862179 43.833333 43.833333 29.333333 16.791667 24.291667 26.900442
[15] 19.250420 10.597016 19.250420  8.847016  4.230769  4.500000 34.845470
[22] 12.844780 14.336447 14.969780 37.327186 17.248117 29.443120 25.580128
[29] 30.093831 10.611122 15.503030  1.910256  1.666667  2.666667 16.500000
[36]  2.666667  1.666667 16.500000 11.536447  4.033333  4.033333 18.969780
[43] 82.169573 22.778571 10.221429 22.778571 10.221429 22.778571 10.221429
[50] 75.672003 22.778571 10.221429 22.778571 10.221429  3.733333 27.584589
[57] 11.056240  5.811670 16.785832 12.416667 21.211670  3.028336 15.252498
[64] 30.446886  2.553114 21.453114 16.136447  6.111670 20.011905  9.807875
[71] 17.263682 13.636759 34.401256 15.156240  6.636447
Warning message:
In rm(list = cmd, envir = .tkplot.env) : object 'tkp.3' not found
> max(edge.betweenness(g))
[1] 82.16957
> g <- delete.edges(g, E(g, P=c(14,34)) )
> rcode.r
Error: object 'rcode.r' not found
> \rcode.r
Error: unexpected input in "\"
> Rscript rcode.r
Error: unexpected symbol in "Rscript rcode.r"
> pwd
Error: object 'pwd' not found
> cs <- leading.eigenvector.community(g, steps=1)
> V(g)$color <- ifelse(cs$membership==1, "lightblue", "green")
> scale <- function(v, a, b) {
+   v <- v-min(v) ; v <- v/max(v) ; v <- v * (b-a) ; v+a
+ }
> V(g)$size <- scale(abs(cs$eigenvectors[[1]]), 10, 20)
> E(g)$color <- "grey"
> E(g)[ V(g)[ color=="lightblue" ] %--% V(g)[ color=="green" ] ]$color <- "red"
> tkplot(g, layout=layout.kamada.kawai, vertex.label.font=2)
[1] 4
> clusters(g)
$membership
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1

$csize
[1] 34

$no
[1] 1

Warning message:
In rm(list = cmd, envir = .tkplot.env) : object 'tkp.4' not found
> clusters.no(g)
Error: could not find function "clusters.no"
> clusters$no(g)
Error in clusters$no : object of type 'closure' is not subsettable
> clusters(g)[0]
named list()
> clusters(g)['no']
$no
[1] 1

> edge.betweenness(g)
 [1]  12.853846 107.968407  12.853846  19.169444  17.952381  33.000000
 [7]  29.333333  19.169444  43.833333  43.833333  29.333333  18.419444
[13]  25.850000  31.620688  20.146154  13.497844  20.146154   4.222222
[19]   4.222222   4.972222  37.940443  27.225000  16.375000  17.008333
[25]  53.416891  20.562612  34.950225  27.225000  39.022619   1.750000
[31]  15.047619   1.750000   1.666667   2.666667  16.500000   2.666667
[37]   1.666667  16.500000  10.708333   4.033333   4.033333  18.141667
[43]  20.700000  12.300000  20.700000  12.300000  20.700000  12.300000
[49] 123.466250  20.700000  12.300000  20.700000  12.300000   3.733333
[55]  24.686214  12.499034   7.087612  16.606194  11.500000  22.487612
[61]   3.387612  15.072860  30.166667   2.833333  19.708333  15.308333
[67]   7.387612  17.933333  12.166667  19.497844  15.122844  30.586214
[73]  16.599034   5.908333
> max(edge.betweenness(g))
[1] 123.4663
> g <- delete.edges(g, E(g, P=c(20,34)) )
> clusters(g)['no']
$no
[1] 1

> edge.betweenness(g)
 [1]  10.500000  10.500000  10.500000  32.408333  12.267857  33.000000
 [7]  29.333333  32.408333  43.833333  43.833333  29.333333  31.658333
[13]  71.792857  82.108730  22.500000  22.500000  22.500000   4.059524
[19]   4.059524   5.077381  63.880556  41.098810  19.263095  19.896429
[25] 100.372222  28.307540  47.451984  41.098810  58.313095   1.750000
[31]  20.732143   1.750000   1.666667   2.666667  16.500000   2.666667
[37]   1.666667  16.500000   8.796429   4.033333   4.033333  16.229762
[43]  13.000000  20.000000  13.000000  20.000000  13.000000  20.000000
[49]  13.000000  20.000000  13.000000  20.000000   3.733333  12.602778
[55]  19.013889  11.944444  15.894444   9.833333  25.577778   4.811111
[61]  14.361111  29.946429   3.053571  16.129762  13.396429  12.244444
[67]  10.233333  20.086905  53.836508  30.272222  16.836111  23.113889
[73]   4.229762
> max(edge.betweenness(g))
[1] 100.3722
> g <- delete.edges(g, E(g, P=c(3,33)) )
> clusters(g)['no']
$no
[1] 1

> edge.betweenness(g)
 [1]  10.500000  10.500000  10.500000  23.395833  13.765152  33.000000
 [7]  29.333333  23.395833  43.833333  43.833333  29.333333  22.645833
[13] 100.327652 139.182684  22.500000  22.500000  22.500000   5.955556
[19]   5.955556   8.470707  43.526786  30.190278  34.559632  23.642100
[25]  38.296861  59.385390  30.190278  44.409975   1.750000  19.234848
[31]   1.750000   1.666667   2.666667  16.500000   2.666667   1.666667
[37]  16.500000  13.042100   9.558766   9.558766  20.975433  19.141667
[43]  13.858333  19.141667  13.858333  19.141667  13.858333  19.141667
[49]  13.858333  19.141667  13.858333   4.300433  13.675595  11.342262
[55]  18.755195  15.205952   9.833333  26.954762   6.188095  13.672619
[61]  30.666667   2.333333  20.542100  17.808766  18.488095  16.016883
[67]  13.016017  77.774675  62.408009  17.908929  15.442262   3.500000
> max(edge.betweenness(g))
[1] 139.1827
> g <- delete.edges(g, E(g, P=c(31,2)) )
> clusters(g)['no']
$no
[1] 1

> edge.betweenness(g)
 [1]  10.500000  10.500000  10.500000  42.500000  11.500000  33.000000
 [7]  29.333333  42.500000  43.833333  43.833333  29.333333  41.750000
[13]  40.750000  22.500000  22.500000  22.500000   2.750000   2.750000
[19]   3.000000 109.250000  52.500000  96.557143  44.119048  65.119048
[25]  89.271429  52.500000  71.250000   1.750000  21.500000   1.750000
[31]   1.666667   2.666667  16.500000   2.666667   1.666667  16.500000
[37]  33.519048  30.319048  30.319048  41.452381  21.166667  11.833333
[43]  21.166667  11.833333  21.166667  11.833333  21.166667  11.833333
[49]  21.166667  11.833333   6.019048  10.166667   7.833333  26.819048
[55]  14.533333   9.833333  28.300000   7.533333  13.000000  30.666667
[61]   2.333333  41.019048  38.285714  24.833333  16.876190  10.438095
[67]  21.166667  11.833333  14.400000  11.933333   3.500000
> max(edge.betweenness(g))
[1] 109.25
> g <- delete.edges(g, E(g, P=c(3,2)) )
> clusters(g)['no']
$no
[1] 1

> edge.betweenness(g)
 [1]  20.000000  20.000000  20.000000  63.083333  11.500000  33.000000
 [7]  29.333333  63.083333  43.833333  43.833333  29.333333  62.333333
[13]   7.500000  13.000000  13.000000  13.000000  18.583333  18.583333
[19]  18.833333  88.916667  96.557143  44.119048  65.119048  89.271429
[25]  88.916667 107.666667   1.750000  21.500000   1.750000   1.666667
[31]   2.666667  16.500000   2.666667   1.666667  16.500000  33.519048
[37]  30.319048  30.319048  41.452381  21.166667  11.833333  21.166667
[43]  11.833333  21.166667  11.833333  21.166667  11.833333  21.166667
[49]  11.833333   6.019048  10.166667   7.833333  26.819048  14.533333
[55]   9.833333  28.300000   7.533333  13.000000  30.666667   2.333333
[61]  41.019048  38.285714  24.833333  16.876190  10.438095  21.166667
[67]  11.833333  14.400000  11.933333   3.500000
> max(edge.betweenness(g))
[1] 107.6667
> g <- delete.edges(g, E(g, P=c(3,4)) )
> clusters(g)['no']
$no
[1] 1

> edge.betweenness(g)
 [1]  20.000000  20.000000  20.000000  94.750000  21.000000  33.000000
 [7]  29.333333  94.750000  43.833333  43.833333  29.333333   8.500000
[13]   7.500000  13.000000  13.000000  13.000000  26.500000  26.500000
[19]   3.000000 142.750000  96.557143  44.119048  65.119048  89.271429
[25] 142.750000  16.000000  12.000000  16.000000   1.666667   2.666667
[31]  16.500000   2.666667   1.666667  16.500000  33.519048  30.319048
[37]  30.319048  41.452381  21.166667  11.833333  21.166667  11.833333
[43]  21.166667  11.833333  21.166667  11.833333  21.166667  11.833333
[49]   6.019048  10.166667   7.833333  26.819048  14.533333   9.833333
[55]  28.300000   7.533333  13.000000  30.666667   2.333333  41.019048
[61]  38.285714  24.833333  16.876190  10.438095  21.166667  11.833333
[67]  14.400000  11.933333   3.500000
> max(edge.betweenness(g))
[1] 142.75
> g <- delete.edges(g, E(g, P=c(3,8)) )
> clusters(g)['no']
$no
[1] 1

> edge.betweenness(g)
 [1]  20.000000  20.000000  20.000000 186.666667  21.000000  33.000000
 [7]  29.333333  15.666667  43.833333  43.833333  29.333333   8.500000
[13]   7.500000  13.000000  13.000000  13.000000  56.666667   9.166667
[19]   3.000000 285.000000  96.557143  44.119048  65.119048  89.271429
[25]  36.666667  12.000000   8.166667   1.666667   2.666667  16.500000
[31]   2.666667   1.666667  16.500000  33.519048  30.319048  30.319048
[37]  41.452381  21.166667  11.833333  21.166667  11.833333  21.166667
[43]  11.833333  21.166667  11.833333  21.166667  11.833333   6.019048
[49]  10.166667   7.833333  26.819048  14.533333   9.833333  28.300000
[55]   7.533333  13.000000  30.666667   2.333333  41.019048  38.285714
[61]  24.833333  16.876190  10.438095  21.166667  11.833333  14.400000
[67]  11.933333   3.500000
> max(edge.betweenness(g))
[1] 285
> g <- delete.edges(g, E(g, P=c(3,14)) )
> clusters(g)['no']
$no
[1] 2

> cs <- leading.eigenvector.community(g, steps=1)
> V(g)$color <- ifelse(cs$membership==1, "lightblue", "green")
> scale <- function(v, a, b) {
+   v <- v-min(v) ; v <- v/max(v) ; v <- v * (b-a) ; v+a
+ }
> V(g)$size <- scale(abs(cs$eigenvectors[[1]]), 10, 20)
Error in vattrs[[name]][index] <- value : replacement has length zero
In addition: Warning messages:
1: In min(v) : no non-missing arguments to min; returning Inf
2: In max(v) : no non-missing arguments to max; returning -Inf
> E(g)$color <- "grey"
> E(g)[ V(g)[ color=="lightblue" ] %--% V(g)[ color=="green" ] ]$color <- "red"
> tkplot(g, layout=layout.kamada.kawai, vertex.label.font=2)
[1] 5
> 







library(igraph)
g <- read.graph("http://igraph.sourceforge.net/karate.net", format="pajek")

repeat{
	edges_betweenness <- edge.betweenness(g)
	max_value <- max(edges_betweenness)
	edge_to_delete <- match(c(max_value),edges_betweenness)
	print('The edge will be deleted next is ')
	print(paste(paste(paste(get.edgelist(g)[edge_to_delete,1]," -> "),get.edgelist(g)[edge_to_delete,2]),paste("      betweenness = ",max_value)))
	g <- delete.edges(g, E(g, P=c(get.edgelist(g)[edge_to_delete,1],get.edgelist(g)[edge_to_delete,2])))
	cluster_no <- clusters(g)['no']
	if(cluster_no == 2)
	{
		break
	}
	cs <- leading.eigenvector.community(g, steps=1)
	V(g)$color <- ifelse(cs$membership==1, "lightblue", "green")
	scale <- function(v, a, b) {
  	v <- v-min(v) ; v <- v/max(v) ; v <- v * (b-a) ; v+a
	}
	#V(g)$size <- scale(abs(cs$eigenvectors[[1]]), 10, 20)
	E(g)$color <- "grey"
	E(g)[ V(g)[ color=="lightblue" ] %--% V(g)[ color=="green" ] ]$color <- "red"
	tkplot(g, layout=layout.kamada.kawai, vertex.label.font=2)
}

cs <- leading.eigenvector.community(g, steps=1)
V(g)$color <- ifelse(cs$membership==1, "lightblue", "green")
scale <- function(v, a, b) {
v <- v-min(v) ; v <- v/max(v) ; v <- v * (b-a) ; v+a
}
V(g)$size <- scale(abs(cs$eigenvectors[[1]]), 10, 20)
E(g)$color <- "grey"
E(g)[ V(g)[ color=="lightblue" ] %--% V(g)[ color=="green" ] ]$color <- "red"
tkplot(g, layout=layout.kamada.kawai, vertex.label.font=2)



